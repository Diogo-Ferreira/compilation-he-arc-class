Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    ELSE
    MOD

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> condition
Rule 6     statement -> css
Rule 7     statement -> keyframes
Rule 8     statement -> LOG expression
Rule 9     condition -> IF expression { programme }
Rule 10    structure -> FOR NUMBER TO NUMBER BY NUMBER { programme }
Rule 11    css -> @ STRING
Rule 12    keyframes -> KEYFRAMES { programme }
Rule 13    animation -> ANIMATION ( assignation ) { programme }
Rule 14    frame -> FRAME ( assignation ) { programme }
Rule 15    expression -> expression ADD_OP expression
Rule 16    expression -> expression MUL_OP expression
Rule 17    expression -> expression IS expression
Rule 18    expression -> NUMBER
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> STRING
Rule 21    expression -> ( expression )
Rule 22    expression -> ADD_OP expression
Rule 23    assignation -> IDENTIFIER : expression

Terminals, with rules where they appear

(                    : 13 14 21
)                    : 13 14 21
:                    : 23
@                    : 11
ADD_OP               : 15 22
ANIMATION            : 13
BY                   : 10
ELSE                 : 
FOR                  : 10
FRAME                : 14
FUNCTION             : 
IDENTIFIER           : 19 23
IF                   : 9
IS                   : 17
KEYFRAMES            : 12
LOG                  : 8
MOD                  : 
MUL_OP               : 16
NUMBER               : 10 10 10 18
STRING               : 11 20
TO                   : 10
error                : 
{                    : 9 10 12 13 14
}                    : 9 10 12 13 14

Nonterminals, with rules where they appear

animation            : 
assignation          : 3 13 14
condition            : 5
css                  : 6
expression           : 8 9 15 15 16 16 17 17 21 22 23
frame                : 
keyframes            : 7
programme            : 2 9 10 12 13 14 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . LOG expression
    (23) assignation -> . IDENTIFIER : expression
    (10) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }
    (9) condition -> . IF expression { programme }
    (11) css -> . @ STRING
    (12) keyframes -> . KEYFRAMES { programme }

    LOG             shift and go to state 5
    IDENTIFIER      shift and go to state 11
    FOR             shift and go to state 4
    IF              shift and go to state 6
    @               shift and go to state 1
    KEYFRAMES       shift and go to state 2

    assignation                    shift and go to state 3
    condition                      shift and go to state 7
    keyframes                      shift and go to state 8
    css                            shift and go to state 9
    statement                      shift and go to state 10
    structure                      shift and go to state 12
    programme                      shift and go to state 13

state 1

    (11) css -> @ . STRING

    STRING          shift and go to state 14


state 2

    (12) keyframes -> KEYFRAMES . { programme }

    {               shift and go to state 15


state 3

    (3) statement -> assignation .

    LOG             reduce using rule 3 (statement -> assignation .)
    IDENTIFIER      reduce using rule 3 (statement -> assignation .)
    FOR             reduce using rule 3 (statement -> assignation .)
    IF              reduce using rule 3 (statement -> assignation .)
    @               reduce using rule 3 (statement -> assignation .)
    KEYFRAMES       reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)


state 4

    (10) structure -> FOR . NUMBER TO NUMBER BY NUMBER { programme }

    NUMBER          shift and go to state 16


state 5

    (8) statement -> LOG . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 21

state 6

    (9) condition -> IF . expression { programme }
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 23

state 7

    (5) statement -> condition .

    LOG             reduce using rule 5 (statement -> condition .)
    IDENTIFIER      reduce using rule 5 (statement -> condition .)
    FOR             reduce using rule 5 (statement -> condition .)
    IF              reduce using rule 5 (statement -> condition .)
    @               reduce using rule 5 (statement -> condition .)
    KEYFRAMES       reduce using rule 5 (statement -> condition .)
    }               reduce using rule 5 (statement -> condition .)
    $end            reduce using rule 5 (statement -> condition .)


state 8

    (7) statement -> keyframes .

    LOG             reduce using rule 7 (statement -> keyframes .)
    IDENTIFIER      reduce using rule 7 (statement -> keyframes .)
    FOR             reduce using rule 7 (statement -> keyframes .)
    IF              reduce using rule 7 (statement -> keyframes .)
    @               reduce using rule 7 (statement -> keyframes .)
    KEYFRAMES       reduce using rule 7 (statement -> keyframes .)
    }               reduce using rule 7 (statement -> keyframes .)
    $end            reduce using rule 7 (statement -> keyframes .)


state 9

    (6) statement -> css .

    LOG             reduce using rule 6 (statement -> css .)
    IDENTIFIER      reduce using rule 6 (statement -> css .)
    FOR             reduce using rule 6 (statement -> css .)
    IF              reduce using rule 6 (statement -> css .)
    @               reduce using rule 6 (statement -> css .)
    KEYFRAMES       reduce using rule 6 (statement -> css .)
    }               reduce using rule 6 (statement -> css .)
    $end            reduce using rule 6 (statement -> css .)


state 10

    (1) programme -> statement .
    (2) programme -> statement . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . LOG expression
    (23) assignation -> . IDENTIFIER : expression
    (10) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }
    (9) condition -> . IF expression { programme }
    (11) css -> . @ STRING
    (12) keyframes -> . KEYFRAMES { programme }

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    LOG             shift and go to state 5
    IDENTIFIER      shift and go to state 11
    FOR             shift and go to state 4
    IF              shift and go to state 6
    @               shift and go to state 1
    KEYFRAMES       shift and go to state 2

    assignation                    shift and go to state 3
    condition                      shift and go to state 7
    keyframes                      shift and go to state 8
    css                            shift and go to state 9
    statement                      shift and go to state 10
    structure                      shift and go to state 12
    programme                      shift and go to state 24

state 11

    (23) assignation -> IDENTIFIER . : expression

    :               shift and go to state 25


state 12

    (4) statement -> structure .

    LOG             reduce using rule 4 (statement -> structure .)
    IDENTIFIER      reduce using rule 4 (statement -> structure .)
    FOR             reduce using rule 4 (statement -> structure .)
    IF              reduce using rule 4 (statement -> structure .)
    @               reduce using rule 4 (statement -> structure .)
    KEYFRAMES       reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)


state 13

    (0) S' -> programme .



state 14

    (11) css -> @ STRING .

    LOG             reduce using rule 11 (css -> @ STRING .)
    IDENTIFIER      reduce using rule 11 (css -> @ STRING .)
    FOR             reduce using rule 11 (css -> @ STRING .)
    IF              reduce using rule 11 (css -> @ STRING .)
    @               reduce using rule 11 (css -> @ STRING .)
    KEYFRAMES       reduce using rule 11 (css -> @ STRING .)
    }               reduce using rule 11 (css -> @ STRING .)
    $end            reduce using rule 11 (css -> @ STRING .)


state 15

    (12) keyframes -> KEYFRAMES { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . LOG expression
    (23) assignation -> . IDENTIFIER : expression
    (10) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }
    (9) condition -> . IF expression { programme }
    (11) css -> . @ STRING
    (12) keyframes -> . KEYFRAMES { programme }

    LOG             shift and go to state 5
    IDENTIFIER      shift and go to state 11
    FOR             shift and go to state 4
    IF              shift and go to state 6
    @               shift and go to state 1
    KEYFRAMES       shift and go to state 2

    assignation                    shift and go to state 3
    condition                      shift and go to state 7
    keyframes                      shift and go to state 8
    css                            shift and go to state 9
    statement                      shift and go to state 10
    structure                      shift and go to state 12
    programme                      shift and go to state 26

state 16

    (10) structure -> FOR NUMBER . TO NUMBER BY NUMBER { programme }

    TO              shift and go to state 27


state 17

    (21) expression -> ( . expression )
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 28

state 18

    (18) expression -> NUMBER .

    ADD_OP          reduce using rule 18 (expression -> NUMBER .)
    MUL_OP          reduce using rule 18 (expression -> NUMBER .)
    IS              reduce using rule 18 (expression -> NUMBER .)
    LOG             reduce using rule 18 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 18 (expression -> NUMBER .)
    FOR             reduce using rule 18 (expression -> NUMBER .)
    IF              reduce using rule 18 (expression -> NUMBER .)
    @               reduce using rule 18 (expression -> NUMBER .)
    KEYFRAMES       reduce using rule 18 (expression -> NUMBER .)
    $end            reduce using rule 18 (expression -> NUMBER .)
    }               reduce using rule 18 (expression -> NUMBER .)
    {               reduce using rule 18 (expression -> NUMBER .)
    )               reduce using rule 18 (expression -> NUMBER .)


state 19

    (22) expression -> ADD_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 29

state 20

    (19) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    IS              reduce using rule 19 (expression -> IDENTIFIER .)
    LOG             reduce using rule 19 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (expression -> IDENTIFIER .)
    FOR             reduce using rule 19 (expression -> IDENTIFIER .)
    IF              reduce using rule 19 (expression -> IDENTIFIER .)
    @               reduce using rule 19 (expression -> IDENTIFIER .)
    KEYFRAMES       reduce using rule 19 (expression -> IDENTIFIER .)
    $end            reduce using rule 19 (expression -> IDENTIFIER .)
    }               reduce using rule 19 (expression -> IDENTIFIER .)
    {               reduce using rule 19 (expression -> IDENTIFIER .)
    )               reduce using rule 19 (expression -> IDENTIFIER .)


state 21

    (8) statement -> LOG expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    LOG             reduce using rule 8 (statement -> LOG expression .)
    IDENTIFIER      reduce using rule 8 (statement -> LOG expression .)
    FOR             reduce using rule 8 (statement -> LOG expression .)
    IF              reduce using rule 8 (statement -> LOG expression .)
    @               reduce using rule 8 (statement -> LOG expression .)
    KEYFRAMES       reduce using rule 8 (statement -> LOG expression .)
    }               reduce using rule 8 (statement -> LOG expression .)
    $end            reduce using rule 8 (statement -> LOG expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 31
    IS              shift and go to state 30


state 22

    (20) expression -> STRING .

    ADD_OP          reduce using rule 20 (expression -> STRING .)
    MUL_OP          reduce using rule 20 (expression -> STRING .)
    IS              reduce using rule 20 (expression -> STRING .)
    LOG             reduce using rule 20 (expression -> STRING .)
    IDENTIFIER      reduce using rule 20 (expression -> STRING .)
    FOR             reduce using rule 20 (expression -> STRING .)
    IF              reduce using rule 20 (expression -> STRING .)
    @               reduce using rule 20 (expression -> STRING .)
    KEYFRAMES       reduce using rule 20 (expression -> STRING .)
    $end            reduce using rule 20 (expression -> STRING .)
    }               reduce using rule 20 (expression -> STRING .)
    {               reduce using rule 20 (expression -> STRING .)
    )               reduce using rule 20 (expression -> STRING .)


state 23

    (9) condition -> IF expression . { programme }
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    {               shift and go to state 33
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 31
    IS              shift and go to state 30


state 24

    (2) programme -> statement programme .

    $end            reduce using rule 2 (programme -> statement programme .)
    }               reduce using rule 2 (programme -> statement programme .)


state 25

    (23) assignation -> IDENTIFIER : . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 34

state 26

    (12) keyframes -> KEYFRAMES { programme . }

    }               shift and go to state 35


state 27

    (10) structure -> FOR NUMBER TO . NUMBER BY NUMBER { programme }

    NUMBER          shift and go to state 36


state 28

    (21) expression -> ( expression . )
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    )               shift and go to state 37
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 31
    IS              shift and go to state 30


state 29

    (22) expression -> ADD_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    ADD_OP          reduce using rule 22 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 22 (expression -> ADD_OP expression .)
    IS              reduce using rule 22 (expression -> ADD_OP expression .)
    LOG             reduce using rule 22 (expression -> ADD_OP expression .)
    IDENTIFIER      reduce using rule 22 (expression -> ADD_OP expression .)
    FOR             reduce using rule 22 (expression -> ADD_OP expression .)
    IF              reduce using rule 22 (expression -> ADD_OP expression .)
    @               reduce using rule 22 (expression -> ADD_OP expression .)
    KEYFRAMES       reduce using rule 22 (expression -> ADD_OP expression .)
    $end            reduce using rule 22 (expression -> ADD_OP expression .)
    }               reduce using rule 22 (expression -> ADD_OP expression .)
    {               reduce using rule 22 (expression -> ADD_OP expression .)
    )               reduce using rule 22 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 32 ]
  ! MUL_OP          [ shift and go to state 31 ]
  ! IS              [ shift and go to state 30 ]


state 30

    (17) expression -> expression IS . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 38

state 31

    (16) expression -> expression MUL_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 39

state 32

    (15) expression -> expression ADD_OP . expression
    (15) expression -> . expression ADD_OP expression
    (16) expression -> . expression MUL_OP expression
    (17) expression -> . expression IS expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    NUMBER          shift and go to state 18
    IDENTIFIER      shift and go to state 20
    STRING          shift and go to state 22
    (               shift and go to state 17
    ADD_OP          shift and go to state 19

    expression                     shift and go to state 40

state 33

    (9) condition -> IF expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . LOG expression
    (23) assignation -> . IDENTIFIER : expression
    (10) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }
    (9) condition -> . IF expression { programme }
    (11) css -> . @ STRING
    (12) keyframes -> . KEYFRAMES { programme }

    LOG             shift and go to state 5
    IDENTIFIER      shift and go to state 11
    FOR             shift and go to state 4
    IF              shift and go to state 6
    @               shift and go to state 1
    KEYFRAMES       shift and go to state 2

    assignation                    shift and go to state 3
    keyframes                      shift and go to state 8
    condition                      shift and go to state 7
    statement                      shift and go to state 10
    css                            shift and go to state 9
    structure                      shift and go to state 12
    programme                      shift and go to state 41

state 34

    (23) assignation -> IDENTIFIER : expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    LOG             reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    IDENTIFIER      reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    FOR             reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    IF              reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    @               reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    KEYFRAMES       reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    }               reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    $end            reduce using rule 23 (assignation -> IDENTIFIER : expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 31
    IS              shift and go to state 30


state 35

    (12) keyframes -> KEYFRAMES { programme } .

    LOG             reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    IDENTIFIER      reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    FOR             reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    IF              reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    @               reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    KEYFRAMES       reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    }               reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)
    $end            reduce using rule 12 (keyframes -> KEYFRAMES { programme } .)


state 36

    (10) structure -> FOR NUMBER TO NUMBER . BY NUMBER { programme }

    BY              shift and go to state 42


state 37

    (21) expression -> ( expression ) .

    ADD_OP          reduce using rule 21 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 21 (expression -> ( expression ) .)
    IS              reduce using rule 21 (expression -> ( expression ) .)
    LOG             reduce using rule 21 (expression -> ( expression ) .)
    IDENTIFIER      reduce using rule 21 (expression -> ( expression ) .)
    FOR             reduce using rule 21 (expression -> ( expression ) .)
    IF              reduce using rule 21 (expression -> ( expression ) .)
    @               reduce using rule 21 (expression -> ( expression ) .)
    KEYFRAMES       reduce using rule 21 (expression -> ( expression ) .)
    $end            reduce using rule 21 (expression -> ( expression ) .)
    }               reduce using rule 21 (expression -> ( expression ) .)
    {               reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)


state 38

    (17) expression -> expression IS expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for IS resolved as shift
    LOG             reduce using rule 17 (expression -> expression IS expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression IS expression .)
    FOR             reduce using rule 17 (expression -> expression IS expression .)
    IF              reduce using rule 17 (expression -> expression IS expression .)
    @               reduce using rule 17 (expression -> expression IS expression .)
    KEYFRAMES       reduce using rule 17 (expression -> expression IS expression .)
    $end            reduce using rule 17 (expression -> expression IS expression .)
    }               reduce using rule 17 (expression -> expression IS expression .)
    {               reduce using rule 17 (expression -> expression IS expression .)
    )               reduce using rule 17 (expression -> expression IS expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 31
    IS              shift and go to state 30

  ! ADD_OP          [ reduce using rule 17 (expression -> expression IS expression .) ]
  ! MUL_OP          [ reduce using rule 17 (expression -> expression IS expression .) ]
  ! IS              [ reduce using rule 17 (expression -> expression IS expression .) ]


state 39

    (16) expression -> expression MUL_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    ADD_OP          reduce using rule 16 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 16 (expression -> expression MUL_OP expression .)
    IS              reduce using rule 16 (expression -> expression MUL_OP expression .)
    LOG             reduce using rule 16 (expression -> expression MUL_OP expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression MUL_OP expression .)
    FOR             reduce using rule 16 (expression -> expression MUL_OP expression .)
    IF              reduce using rule 16 (expression -> expression MUL_OP expression .)
    @               reduce using rule 16 (expression -> expression MUL_OP expression .)
    KEYFRAMES       reduce using rule 16 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 16 (expression -> expression MUL_OP expression .)
    }               reduce using rule 16 (expression -> expression MUL_OP expression .)
    {               reduce using rule 16 (expression -> expression MUL_OP expression .)
    )               reduce using rule 16 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 32 ]
  ! MUL_OP          [ shift and go to state 31 ]
  ! IS              [ shift and go to state 30 ]


state 40

    (15) expression -> expression ADD_OP expression .
    (15) expression -> expression . ADD_OP expression
    (16) expression -> expression . MUL_OP expression
    (17) expression -> expression . IS expression

    ADD_OP          reduce using rule 15 (expression -> expression ADD_OP expression .)
    IS              reduce using rule 15 (expression -> expression ADD_OP expression .)
    LOG             reduce using rule 15 (expression -> expression ADD_OP expression .)
    IDENTIFIER      reduce using rule 15 (expression -> expression ADD_OP expression .)
    FOR             reduce using rule 15 (expression -> expression ADD_OP expression .)
    IF              reduce using rule 15 (expression -> expression ADD_OP expression .)
    @               reduce using rule 15 (expression -> expression ADD_OP expression .)
    KEYFRAMES       reduce using rule 15 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 15 (expression -> expression ADD_OP expression .)
    }               reduce using rule 15 (expression -> expression ADD_OP expression .)
    {               reduce using rule 15 (expression -> expression ADD_OP expression .)
    )               reduce using rule 15 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 31

  ! MUL_OP          [ reduce using rule 15 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 32 ]
  ! IS              [ shift and go to state 30 ]


state 41

    (9) condition -> IF expression { programme . }

    }               shift and go to state 43


state 42

    (10) structure -> FOR NUMBER TO NUMBER BY . NUMBER { programme }

    NUMBER          shift and go to state 44


state 43

    (9) condition -> IF expression { programme } .

    LOG             reduce using rule 9 (condition -> IF expression { programme } .)
    IDENTIFIER      reduce using rule 9 (condition -> IF expression { programme } .)
    FOR             reduce using rule 9 (condition -> IF expression { programme } .)
    IF              reduce using rule 9 (condition -> IF expression { programme } .)
    @               reduce using rule 9 (condition -> IF expression { programme } .)
    KEYFRAMES       reduce using rule 9 (condition -> IF expression { programme } .)
    $end            reduce using rule 9 (condition -> IF expression { programme } .)
    }               reduce using rule 9 (condition -> IF expression { programme } .)


state 44

    (10) structure -> FOR NUMBER TO NUMBER BY NUMBER . { programme }

    {               shift and go to state 45


state 45

    (10) structure -> FOR NUMBER TO NUMBER BY NUMBER { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . LOG expression
    (23) assignation -> . IDENTIFIER : expression
    (10) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }
    (9) condition -> . IF expression { programme }
    (11) css -> . @ STRING
    (12) keyframes -> . KEYFRAMES { programme }

    LOG             shift and go to state 5
    IDENTIFIER      shift and go to state 11
    FOR             shift and go to state 4
    IF              shift and go to state 6
    @               shift and go to state 1
    KEYFRAMES       shift and go to state 2

    assignation                    shift and go to state 3
    condition                      shift and go to state 7
    keyframes                      shift and go to state 8
    css                            shift and go to state 9
    statement                      shift and go to state 10
    structure                      shift and go to state 12
    programme                      shift and go to state 46

state 46

    (10) structure -> FOR NUMBER TO NUMBER BY NUMBER { programme . }

    }               shift and go to state 47


state 47

    (10) structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .

    LOG             reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    IDENTIFIER      reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    FOR             reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    IF              reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    @               reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    KEYFRAMES       reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    $end            reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    }               reduce using rule 10 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 38 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 38 resolved as shift
WARNING: shift/reduce conflict for IS in state 38 resolved as shift
