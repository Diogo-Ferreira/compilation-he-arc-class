Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    IS
    ELSE
    IF
    MOD

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> LOG expression
Rule 6     structure -> FOR NUMBER TO NUMBER BY NUMBER { programme }
Rule 7     css -> @ STRING
Rule 8     expression -> expression ADD_OP expression
Rule 9     expression -> expression MUL_OP expression
Rule 10    expression -> NUMBER
Rule 11    expression -> IDENTIFIER
Rule 12    expression -> ( expression )
Rule 13    expression -> IDENTIFIER ( ) { programme }
Rule 14    expression -> ADD_OP expression
Rule 15    assignation -> IDENTIFIER : expression

Terminals, with rules where they appear

(                    : 12 13
)                    : 12 13
:                    : 15
;                    : 2
@                    : 7
ADD_OP               : 8 14
BY                   : 6
ELSE                 : 
FOR                  : 6
FUNCTION             : 
IDENTIFIER           : 11 13 15
IF                   : 
IS                   : 
LOG                  : 5
MOD                  : 
MUL_OP               : 9
NUMBER               : 6 6 6 10
STRING               : 7
TO                   : 6
error                : 
{                    : 6 13
}                    : 6 13

Nonterminals, with rules where they appear

assignation          : 3
css                  : 
expression           : 5 8 8 9 9 12 14 15
programme            : 2 6 13 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . LOG expression
    (15) assignation -> . IDENTIFIER : expression
    (6) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }

    LOG             shift and go to state 2
    IDENTIFIER      shift and go to state 1
    FOR             shift and go to state 3

    structure                      shift and go to state 6
    assignation                    shift and go to state 7
    statement                      shift and go to state 4
    programme                      shift and go to state 5

state 1

    (15) assignation -> IDENTIFIER . : expression

    :               shift and go to state 8


state 2

    (5) statement -> LOG . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 13

state 3

    (6) structure -> FOR . NUMBER TO NUMBER BY NUMBER { programme }

    NUMBER          shift and go to state 14


state 4

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 15


state 5

    (0) S' -> programme .



state 6

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)


state 7

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)


state 8

    (15) assignation -> IDENTIFIER : . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 16

state 9

    (12) expression -> ( . expression )
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 17

state 10

    (10) expression -> NUMBER .

    ADD_OP          reduce using rule 10 (expression -> NUMBER .)
    MUL_OP          reduce using rule 10 (expression -> NUMBER .)
    ;               reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    }               reduce using rule 10 (expression -> NUMBER .)
    )               reduce using rule 10 (expression -> NUMBER .)


state 11

    (14) expression -> ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 18

state 12

    (11) expression -> IDENTIFIER .
    (13) expression -> IDENTIFIER . ( ) { programme }

    ADD_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    ;               reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)
    }               reduce using rule 11 (expression -> IDENTIFIER .)
    )               reduce using rule 11 (expression -> IDENTIFIER .)
    (               shift and go to state 19


state 13

    (5) statement -> LOG expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 5 (statement -> LOG expression .)
    }               reduce using rule 5 (statement -> LOG expression .)
    $end            reduce using rule 5 (statement -> LOG expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 20


state 14

    (6) structure -> FOR NUMBER . TO NUMBER BY NUMBER { programme }

    TO              shift and go to state 22


state 15

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . LOG expression
    (15) assignation -> . IDENTIFIER : expression
    (6) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }

    LOG             shift and go to state 2
    IDENTIFIER      shift and go to state 1
    FOR             shift and go to state 3

    structure                      shift and go to state 6
    assignation                    shift and go to state 7
    statement                      shift and go to state 4
    programme                      shift and go to state 23

state 16

    (15) assignation -> IDENTIFIER : expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 15 (assignation -> IDENTIFIER : expression .)
    }               reduce using rule 15 (assignation -> IDENTIFIER : expression .)
    $end            reduce using rule 15 (assignation -> IDENTIFIER : expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 20


state 17

    (12) expression -> ( expression . )
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    )               shift and go to state 24
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 20


state 18

    (14) expression -> ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    ;               reduce using rule 14 (expression -> ADD_OP expression .)
    $end            reduce using rule 14 (expression -> ADD_OP expression .)
    }               reduce using rule 14 (expression -> ADD_OP expression .)
    )               reduce using rule 14 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 20 ]


state 19

    (13) expression -> IDENTIFIER ( . ) { programme }

    )               shift and go to state 25


state 20

    (9) expression -> expression MUL_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 26

state 21

    (8) expression -> expression ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . ( expression )
    (13) expression -> . IDENTIFIER ( ) { programme }
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 12
    (               shift and go to state 9
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 27

state 22

    (6) structure -> FOR NUMBER TO . NUMBER BY NUMBER { programme }

    NUMBER          shift and go to state 28


state 23

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 24

    (12) expression -> ( expression ) .

    ADD_OP          reduce using rule 12 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 12 (expression -> ( expression ) .)
    ;               reduce using rule 12 (expression -> ( expression ) .)
    $end            reduce using rule 12 (expression -> ( expression ) .)
    }               reduce using rule 12 (expression -> ( expression ) .)
    )               reduce using rule 12 (expression -> ( expression ) .)


state 25

    (13) expression -> IDENTIFIER ( ) . { programme }

    {               shift and go to state 29


state 26

    (9) expression -> expression MUL_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 9 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 9 (expression -> expression MUL_OP expression .)
    }               reduce using rule 9 (expression -> expression MUL_OP expression .)
    )               reduce using rule 9 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 20 ]


state 27

    (8) expression -> expression ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 8 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 8 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 8 (expression -> expression ADD_OP expression .)
    }               reduce using rule 8 (expression -> expression ADD_OP expression .)
    )               reduce using rule 8 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 20

  ! MUL_OP          [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 21 ]


state 28

    (6) structure -> FOR NUMBER TO NUMBER . BY NUMBER { programme }

    BY              shift and go to state 30


state 29

    (13) expression -> IDENTIFIER ( ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . LOG expression
    (15) assignation -> . IDENTIFIER : expression
    (6) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }

    LOG             shift and go to state 2
    IDENTIFIER      shift and go to state 1
    FOR             shift and go to state 3

    structure                      shift and go to state 6
    assignation                    shift and go to state 7
    statement                      shift and go to state 4
    programme                      shift and go to state 31

state 30

    (6) structure -> FOR NUMBER TO NUMBER BY . NUMBER { programme }

    NUMBER          shift and go to state 32


state 31

    (13) expression -> IDENTIFIER ( ) { programme . }

    }               shift and go to state 33


state 32

    (6) structure -> FOR NUMBER TO NUMBER BY NUMBER . { programme }

    {               shift and go to state 34


state 33

    (13) expression -> IDENTIFIER ( ) { programme } .

    ADD_OP          reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)
    MUL_OP          reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)
    ;               reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)
    $end            reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)
    }               reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)
    )               reduce using rule 13 (expression -> IDENTIFIER ( ) { programme } .)


state 34

    (6) structure -> FOR NUMBER TO NUMBER BY NUMBER { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . LOG expression
    (15) assignation -> . IDENTIFIER : expression
    (6) structure -> . FOR NUMBER TO NUMBER BY NUMBER { programme }

    LOG             shift and go to state 2
    IDENTIFIER      shift and go to state 1
    FOR             shift and go to state 3

    structure                      shift and go to state 6
    assignation                    shift and go to state 7
    statement                      shift and go to state 4
    programme                      shift and go to state 35

state 35

    (6) structure -> FOR NUMBER TO NUMBER BY NUMBER { programme . }

    }               shift and go to state 36


state 36

    (6) structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .

    ;               reduce using rule 6 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    }               reduce using rule 6 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)
    $end            reduce using rule 6 (structure -> FOR NUMBER TO NUMBER BY NUMBER { programme } .)

