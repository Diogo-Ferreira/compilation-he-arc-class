Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    IS
    ELSE
    NOT

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> condition
Rule 6     statement -> css
Rule 7     statement -> keyframes
Rule 8     statement -> animation
Rule 9     statement -> frame
Rule 10    statement -> LOG expression
Rule 11    condition -> IF expression { programme }
Rule 12    structure -> FOR expression TO expression BY expression { programme }
Rule 13    css -> @ STRING
Rule 14    keyframes -> KEYFRAMES { programme }
Rule 15    animation -> ANIMATION ( STRING , STRING ) { programme }
Rule 16    frame -> FRAME ( expression ) { programme }
Rule 17    expression -> expression ADD_OP expression
Rule 18    expression -> expression MUL_OP expression
Rule 19    expression -> expression MOD expression
Rule 20    expression -> expression CMP_OP expression
Rule 21    expression -> NUMBER
Rule 22    expression -> IDENTIFIER
Rule 23    expression -> STRING
Rule 24    expression -> ( expression )
Rule 25    expression -> ADD_OP expression
Rule 26    assignation -> IDENTIFIER : expression

Terminals, with rules where they appear

(                    : 15 16 24
)                    : 15 16 24
,                    : 15
:                    : 26
@                    : 13
ADD_OP               : 17 25
ANIMATION            : 15
BY                   : 12
CMP_OP               : 20
ELSE                 : 
FOR                  : 12
FRAME                : 16
FUNCTION             : 
IDENTIFIER           : 22 26
IF                   : 11
IS                   : 
KEYFRAMES            : 14
LOG                  : 10
MOD                  : 19
MUL_OP               : 18
NOT                  : 
NUMBER               : 21
STRING               : 13 15 15 23
TO                   : 12
error                : 
{                    : 11 12 14 15 16
}                    : 11 12 14 15 16

Nonterminals, with rules where they appear

animation            : 8
assignation          : 3
condition            : 5
css                  : 6
expression           : 10 11 12 12 12 16 17 17 18 18 19 19 20 20 24 25 26
frame                : 9
keyframes            : 7
programme            : 2 11 12 14 15 16 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    condition                      shift and go to state 12
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    css                            shift and go to state 8
    statement                      shift and go to state 7
    structure                      shift and go to state 6
    programme                      shift and go to state 17

state 1

    (10) statement -> LOG . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 18

state 2

    (9) statement -> frame .

    LOG             reduce using rule 9 (statement -> frame .)
    IDENTIFIER      reduce using rule 9 (statement -> frame .)
    FOR             reduce using rule 9 (statement -> frame .)
    IF              reduce using rule 9 (statement -> frame .)
    @               reduce using rule 9 (statement -> frame .)
    KEYFRAMES       reduce using rule 9 (statement -> frame .)
    ANIMATION       reduce using rule 9 (statement -> frame .)
    FRAME           reduce using rule 9 (statement -> frame .)
    }               reduce using rule 9 (statement -> frame .)
    $end            reduce using rule 9 (statement -> frame .)


state 3

    (7) statement -> keyframes .

    LOG             reduce using rule 7 (statement -> keyframes .)
    IDENTIFIER      reduce using rule 7 (statement -> keyframes .)
    FOR             reduce using rule 7 (statement -> keyframes .)
    IF              reduce using rule 7 (statement -> keyframes .)
    @               reduce using rule 7 (statement -> keyframes .)
    KEYFRAMES       reduce using rule 7 (statement -> keyframes .)
    ANIMATION       reduce using rule 7 (statement -> keyframes .)
    FRAME           reduce using rule 7 (statement -> keyframes .)
    }               reduce using rule 7 (statement -> keyframes .)
    $end            reduce using rule 7 (statement -> keyframes .)


state 4

    (16) frame -> FRAME . ( expression ) { programme }

    (               shift and go to state 24


state 5

    (8) statement -> animation .

    LOG             reduce using rule 8 (statement -> animation .)
    IDENTIFIER      reduce using rule 8 (statement -> animation .)
    FOR             reduce using rule 8 (statement -> animation .)
    IF              reduce using rule 8 (statement -> animation .)
    @               reduce using rule 8 (statement -> animation .)
    KEYFRAMES       reduce using rule 8 (statement -> animation .)
    ANIMATION       reduce using rule 8 (statement -> animation .)
    FRAME           reduce using rule 8 (statement -> animation .)
    }               reduce using rule 8 (statement -> animation .)
    $end            reduce using rule 8 (statement -> animation .)


state 6

    (4) statement -> structure .

    LOG             reduce using rule 4 (statement -> structure .)
    IDENTIFIER      reduce using rule 4 (statement -> structure .)
    FOR             reduce using rule 4 (statement -> structure .)
    IF              reduce using rule 4 (statement -> structure .)
    @               reduce using rule 4 (statement -> structure .)
    KEYFRAMES       reduce using rule 4 (statement -> structure .)
    ANIMATION       reduce using rule 4 (statement -> structure .)
    FRAME           reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)


state 7

    (1) programme -> statement .
    (2) programme -> statement . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    }               reduce using rule 1 (programme -> statement .)
    $end            reduce using rule 1 (programme -> statement .)
    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    condition                      shift and go to state 12
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    css                            shift and go to state 8
    statement                      shift and go to state 7
    structure                      shift and go to state 6
    programme                      shift and go to state 25

state 8

    (6) statement -> css .

    LOG             reduce using rule 6 (statement -> css .)
    IDENTIFIER      reduce using rule 6 (statement -> css .)
    FOR             reduce using rule 6 (statement -> css .)
    IF              reduce using rule 6 (statement -> css .)
    @               reduce using rule 6 (statement -> css .)
    KEYFRAMES       reduce using rule 6 (statement -> css .)
    ANIMATION       reduce using rule 6 (statement -> css .)
    FRAME           reduce using rule 6 (statement -> css .)
    }               reduce using rule 6 (statement -> css .)
    $end            reduce using rule 6 (statement -> css .)


state 9

    (13) css -> @ . STRING

    STRING          shift and go to state 26


state 10

    (12) structure -> FOR . expression TO expression BY expression { programme }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 27

state 11

    (15) animation -> ANIMATION . ( STRING , STRING ) { programme }

    (               shift and go to state 28


state 12

    (5) statement -> condition .

    LOG             reduce using rule 5 (statement -> condition .)
    IDENTIFIER      reduce using rule 5 (statement -> condition .)
    FOR             reduce using rule 5 (statement -> condition .)
    IF              reduce using rule 5 (statement -> condition .)
    @               reduce using rule 5 (statement -> condition .)
    KEYFRAMES       reduce using rule 5 (statement -> condition .)
    ANIMATION       reduce using rule 5 (statement -> condition .)
    FRAME           reduce using rule 5 (statement -> condition .)
    }               reduce using rule 5 (statement -> condition .)
    $end            reduce using rule 5 (statement -> condition .)


state 13

    (11) condition -> IF . expression { programme }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 29

state 14

    (26) assignation -> IDENTIFIER . : expression

    :               shift and go to state 30


state 15

    (3) statement -> assignation .

    LOG             reduce using rule 3 (statement -> assignation .)
    IDENTIFIER      reduce using rule 3 (statement -> assignation .)
    FOR             reduce using rule 3 (statement -> assignation .)
    IF              reduce using rule 3 (statement -> assignation .)
    @               reduce using rule 3 (statement -> assignation .)
    KEYFRAMES       reduce using rule 3 (statement -> assignation .)
    ANIMATION       reduce using rule 3 (statement -> assignation .)
    FRAME           reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)


state 16

    (14) keyframes -> KEYFRAMES . { programme }

    {               shift and go to state 31


state 17

    (0) S' -> programme .



state 18

    (10) statement -> LOG expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    LOG             reduce using rule 10 (statement -> LOG expression .)
    IDENTIFIER      reduce using rule 10 (statement -> LOG expression .)
    FOR             reduce using rule 10 (statement -> LOG expression .)
    IF              reduce using rule 10 (statement -> LOG expression .)
    @               reduce using rule 10 (statement -> LOG expression .)
    KEYFRAMES       reduce using rule 10 (statement -> LOG expression .)
    ANIMATION       reduce using rule 10 (statement -> LOG expression .)
    FRAME           reduce using rule 10 (statement -> LOG expression .)
    }               reduce using rule 10 (statement -> LOG expression .)
    $end            reduce using rule 10 (statement -> LOG expression .)
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 19

    (21) expression -> NUMBER .

    ADD_OP          reduce using rule 21 (expression -> NUMBER .)
    MUL_OP          reduce using rule 21 (expression -> NUMBER .)
    MOD             reduce using rule 21 (expression -> NUMBER .)
    CMP_OP          reduce using rule 21 (expression -> NUMBER .)
    LOG             reduce using rule 21 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 21 (expression -> NUMBER .)
    FOR             reduce using rule 21 (expression -> NUMBER .)
    IF              reduce using rule 21 (expression -> NUMBER .)
    @               reduce using rule 21 (expression -> NUMBER .)
    KEYFRAMES       reduce using rule 21 (expression -> NUMBER .)
    ANIMATION       reduce using rule 21 (expression -> NUMBER .)
    FRAME           reduce using rule 21 (expression -> NUMBER .)
    $end            reduce using rule 21 (expression -> NUMBER .)
    }               reduce using rule 21 (expression -> NUMBER .)
    TO              reduce using rule 21 (expression -> NUMBER .)
    {               reduce using rule 21 (expression -> NUMBER .)
    )               reduce using rule 21 (expression -> NUMBER .)
    BY              reduce using rule 21 (expression -> NUMBER .)


state 20

    (24) expression -> ( . expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 36

state 21

    (25) expression -> ADD_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 37

state 22

    (23) expression -> STRING .

    ADD_OP          reduce using rule 23 (expression -> STRING .)
    MUL_OP          reduce using rule 23 (expression -> STRING .)
    MOD             reduce using rule 23 (expression -> STRING .)
    CMP_OP          reduce using rule 23 (expression -> STRING .)
    LOG             reduce using rule 23 (expression -> STRING .)
    IDENTIFIER      reduce using rule 23 (expression -> STRING .)
    FOR             reduce using rule 23 (expression -> STRING .)
    IF              reduce using rule 23 (expression -> STRING .)
    @               reduce using rule 23 (expression -> STRING .)
    KEYFRAMES       reduce using rule 23 (expression -> STRING .)
    ANIMATION       reduce using rule 23 (expression -> STRING .)
    FRAME           reduce using rule 23 (expression -> STRING .)
    $end            reduce using rule 23 (expression -> STRING .)
    }               reduce using rule 23 (expression -> STRING .)
    TO              reduce using rule 23 (expression -> STRING .)
    {               reduce using rule 23 (expression -> STRING .)
    )               reduce using rule 23 (expression -> STRING .)
    BY              reduce using rule 23 (expression -> STRING .)


state 23

    (22) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    MOD             reduce using rule 22 (expression -> IDENTIFIER .)
    CMP_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    LOG             reduce using rule 22 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 22 (expression -> IDENTIFIER .)
    FOR             reduce using rule 22 (expression -> IDENTIFIER .)
    IF              reduce using rule 22 (expression -> IDENTIFIER .)
    @               reduce using rule 22 (expression -> IDENTIFIER .)
    KEYFRAMES       reduce using rule 22 (expression -> IDENTIFIER .)
    ANIMATION       reduce using rule 22 (expression -> IDENTIFIER .)
    FRAME           reduce using rule 22 (expression -> IDENTIFIER .)
    $end            reduce using rule 22 (expression -> IDENTIFIER .)
    }               reduce using rule 22 (expression -> IDENTIFIER .)
    TO              reduce using rule 22 (expression -> IDENTIFIER .)
    {               reduce using rule 22 (expression -> IDENTIFIER .)
    )               reduce using rule 22 (expression -> IDENTIFIER .)
    BY              reduce using rule 22 (expression -> IDENTIFIER .)


state 24

    (16) frame -> FRAME ( . expression ) { programme }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 38

state 25

    (2) programme -> statement programme .

    }               reduce using rule 2 (programme -> statement programme .)
    $end            reduce using rule 2 (programme -> statement programme .)


state 26

    (13) css -> @ STRING .

    LOG             reduce using rule 13 (css -> @ STRING .)
    IDENTIFIER      reduce using rule 13 (css -> @ STRING .)
    FOR             reduce using rule 13 (css -> @ STRING .)
    IF              reduce using rule 13 (css -> @ STRING .)
    @               reduce using rule 13 (css -> @ STRING .)
    KEYFRAMES       reduce using rule 13 (css -> @ STRING .)
    ANIMATION       reduce using rule 13 (css -> @ STRING .)
    FRAME           reduce using rule 13 (css -> @ STRING .)
    }               reduce using rule 13 (css -> @ STRING .)
    $end            reduce using rule 13 (css -> @ STRING .)


state 27

    (12) structure -> FOR expression . TO expression BY expression { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    TO              shift and go to state 39
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 28

    (15) animation -> ANIMATION ( . STRING , STRING ) { programme }

    STRING          shift and go to state 40


state 29

    (11) condition -> IF expression . { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    {               shift and go to state 41
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 30

    (26) assignation -> IDENTIFIER : . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 42

state 31

    (14) keyframes -> KEYFRAMES { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    condition                      shift and go to state 12
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    css                            shift and go to state 8
    statement                      shift and go to state 7
    structure                      shift and go to state 6
    programme                      shift and go to state 43

state 32

    (18) expression -> expression MUL_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 44

state 33

    (17) expression -> expression ADD_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 45

state 34

    (20) expression -> expression CMP_OP . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 46

state 35

    (19) expression -> expression MOD . expression
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 47

state 36

    (24) expression -> ( expression . )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    )               shift and go to state 48
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 37

    (25) expression -> ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    ADD_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    MOD             reduce using rule 25 (expression -> ADD_OP expression .)
    CMP_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    LOG             reduce using rule 25 (expression -> ADD_OP expression .)
    IDENTIFIER      reduce using rule 25 (expression -> ADD_OP expression .)
    FOR             reduce using rule 25 (expression -> ADD_OP expression .)
    IF              reduce using rule 25 (expression -> ADD_OP expression .)
    @               reduce using rule 25 (expression -> ADD_OP expression .)
    KEYFRAMES       reduce using rule 25 (expression -> ADD_OP expression .)
    ANIMATION       reduce using rule 25 (expression -> ADD_OP expression .)
    FRAME           reduce using rule 25 (expression -> ADD_OP expression .)
    $end            reduce using rule 25 (expression -> ADD_OP expression .)
    }               reduce using rule 25 (expression -> ADD_OP expression .)
    TO              reduce using rule 25 (expression -> ADD_OP expression .)
    {               reduce using rule 25 (expression -> ADD_OP expression .)
    )               reduce using rule 25 (expression -> ADD_OP expression .)
    BY              reduce using rule 25 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 33 ]
  ! MUL_OP          [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 35 ]
  ! CMP_OP          [ shift and go to state 34 ]


state 38

    (16) frame -> FRAME ( expression . ) { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    )               shift and go to state 49
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 39

    (12) structure -> FOR expression TO . expression BY expression { programme }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 50

state 40

    (15) animation -> ANIMATION ( STRING . , STRING ) { programme }

    ,               shift and go to state 51


state 41

    (11) condition -> IF expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    condition                      shift and go to state 12
    statement                      shift and go to state 7
    css                            shift and go to state 8
    structure                      shift and go to state 6
    programme                      shift and go to state 52

state 42

    (26) assignation -> IDENTIFIER : expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    LOG             reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    IDENTIFIER      reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    FOR             reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    IF              reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    @               reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    KEYFRAMES       reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    ANIMATION       reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    FRAME           reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    }               reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    $end            reduce using rule 26 (assignation -> IDENTIFIER : expression .)
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 43

    (14) keyframes -> KEYFRAMES { programme . }

    }               shift and go to state 53


state 44

    (18) expression -> expression MUL_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    ADD_OP          reduce using rule 18 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 18 (expression -> expression MUL_OP expression .)
    MOD             reduce using rule 18 (expression -> expression MUL_OP expression .)
    CMP_OP          reduce using rule 18 (expression -> expression MUL_OP expression .)
    LOG             reduce using rule 18 (expression -> expression MUL_OP expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression MUL_OP expression .)
    FOR             reduce using rule 18 (expression -> expression MUL_OP expression .)
    IF              reduce using rule 18 (expression -> expression MUL_OP expression .)
    @               reduce using rule 18 (expression -> expression MUL_OP expression .)
    KEYFRAMES       reduce using rule 18 (expression -> expression MUL_OP expression .)
    ANIMATION       reduce using rule 18 (expression -> expression MUL_OP expression .)
    FRAME           reduce using rule 18 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 18 (expression -> expression MUL_OP expression .)
    }               reduce using rule 18 (expression -> expression MUL_OP expression .)
    TO              reduce using rule 18 (expression -> expression MUL_OP expression .)
    {               reduce using rule 18 (expression -> expression MUL_OP expression .)
    )               reduce using rule 18 (expression -> expression MUL_OP expression .)
    BY              reduce using rule 18 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 33 ]
  ! MUL_OP          [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 35 ]
  ! CMP_OP          [ shift and go to state 34 ]


state 45

    (17) expression -> expression ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    ADD_OP          reduce using rule 17 (expression -> expression ADD_OP expression .)
    MOD             reduce using rule 17 (expression -> expression ADD_OP expression .)
    CMP_OP          reduce using rule 17 (expression -> expression ADD_OP expression .)
    LOG             reduce using rule 17 (expression -> expression ADD_OP expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression ADD_OP expression .)
    FOR             reduce using rule 17 (expression -> expression ADD_OP expression .)
    IF              reduce using rule 17 (expression -> expression ADD_OP expression .)
    @               reduce using rule 17 (expression -> expression ADD_OP expression .)
    KEYFRAMES       reduce using rule 17 (expression -> expression ADD_OP expression .)
    ANIMATION       reduce using rule 17 (expression -> expression ADD_OP expression .)
    FRAME           reduce using rule 17 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 17 (expression -> expression ADD_OP expression .)
    }               reduce using rule 17 (expression -> expression ADD_OP expression .)
    TO              reduce using rule 17 (expression -> expression ADD_OP expression .)
    {               reduce using rule 17 (expression -> expression ADD_OP expression .)
    )               reduce using rule 17 (expression -> expression ADD_OP expression .)
    BY              reduce using rule 17 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 32

  ! MUL_OP          [ reduce using rule 17 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 33 ]
  ! MOD             [ shift and go to state 35 ]
  ! CMP_OP          [ shift and go to state 34 ]


state 46

    (20) expression -> expression CMP_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for CMP_OP resolved as shift
    LOG             reduce using rule 20 (expression -> expression CMP_OP expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression CMP_OP expression .)
    FOR             reduce using rule 20 (expression -> expression CMP_OP expression .)
    IF              reduce using rule 20 (expression -> expression CMP_OP expression .)
    @               reduce using rule 20 (expression -> expression CMP_OP expression .)
    KEYFRAMES       reduce using rule 20 (expression -> expression CMP_OP expression .)
    ANIMATION       reduce using rule 20 (expression -> expression CMP_OP expression .)
    FRAME           reduce using rule 20 (expression -> expression CMP_OP expression .)
    $end            reduce using rule 20 (expression -> expression CMP_OP expression .)
    }               reduce using rule 20 (expression -> expression CMP_OP expression .)
    TO              reduce using rule 20 (expression -> expression CMP_OP expression .)
    {               reduce using rule 20 (expression -> expression CMP_OP expression .)
    )               reduce using rule 20 (expression -> expression CMP_OP expression .)
    BY              reduce using rule 20 (expression -> expression CMP_OP expression .)
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34

  ! ADD_OP          [ reduce using rule 20 (expression -> expression CMP_OP expression .) ]
  ! MUL_OP          [ reduce using rule 20 (expression -> expression CMP_OP expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression CMP_OP expression .) ]
  ! CMP_OP          [ reduce using rule 20 (expression -> expression CMP_OP expression .) ]


state 47

    (19) expression -> expression MOD expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for CMP_OP resolved as shift
    LOG             reduce using rule 19 (expression -> expression MOD expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression MOD expression .)
    FOR             reduce using rule 19 (expression -> expression MOD expression .)
    IF              reduce using rule 19 (expression -> expression MOD expression .)
    @               reduce using rule 19 (expression -> expression MOD expression .)
    KEYFRAMES       reduce using rule 19 (expression -> expression MOD expression .)
    ANIMATION       reduce using rule 19 (expression -> expression MOD expression .)
    FRAME           reduce using rule 19 (expression -> expression MOD expression .)
    $end            reduce using rule 19 (expression -> expression MOD expression .)
    }               reduce using rule 19 (expression -> expression MOD expression .)
    TO              reduce using rule 19 (expression -> expression MOD expression .)
    {               reduce using rule 19 (expression -> expression MOD expression .)
    )               reduce using rule 19 (expression -> expression MOD expression .)
    BY              reduce using rule 19 (expression -> expression MOD expression .)
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34

  ! ADD_OP          [ reduce using rule 19 (expression -> expression MOD expression .) ]
  ! MUL_OP          [ reduce using rule 19 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression MOD expression .) ]
  ! CMP_OP          [ reduce using rule 19 (expression -> expression MOD expression .) ]


state 48

    (24) expression -> ( expression ) .

    ADD_OP          reduce using rule 24 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 24 (expression -> ( expression ) .)
    MOD             reduce using rule 24 (expression -> ( expression ) .)
    CMP_OP          reduce using rule 24 (expression -> ( expression ) .)
    LOG             reduce using rule 24 (expression -> ( expression ) .)
    IDENTIFIER      reduce using rule 24 (expression -> ( expression ) .)
    FOR             reduce using rule 24 (expression -> ( expression ) .)
    IF              reduce using rule 24 (expression -> ( expression ) .)
    @               reduce using rule 24 (expression -> ( expression ) .)
    KEYFRAMES       reduce using rule 24 (expression -> ( expression ) .)
    ANIMATION       reduce using rule 24 (expression -> ( expression ) .)
    FRAME           reduce using rule 24 (expression -> ( expression ) .)
    $end            reduce using rule 24 (expression -> ( expression ) .)
    }               reduce using rule 24 (expression -> ( expression ) .)
    TO              reduce using rule 24 (expression -> ( expression ) .)
    {               reduce using rule 24 (expression -> ( expression ) .)
    )               reduce using rule 24 (expression -> ( expression ) .)
    BY              reduce using rule 24 (expression -> ( expression ) .)


state 49

    (16) frame -> FRAME ( expression ) . { programme }

    {               shift and go to state 54


state 50

    (12) structure -> FOR expression TO expression . BY expression { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    BY              shift and go to state 55
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 51

    (15) animation -> ANIMATION ( STRING , . STRING ) { programme }

    STRING          shift and go to state 56


state 52

    (11) condition -> IF expression { programme . }

    }               shift and go to state 57


state 53

    (14) keyframes -> KEYFRAMES { programme } .

    LOG             reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    IDENTIFIER      reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    FOR             reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    IF              reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    @               reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    KEYFRAMES       reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    ANIMATION       reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    FRAME           reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    $end            reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)
    }               reduce using rule 14 (keyframes -> KEYFRAMES { programme } .)


state 54

    (16) frame -> FRAME ( expression ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    condition                      shift and go to state 12
    statement                      shift and go to state 7
    css                            shift and go to state 8
    structure                      shift and go to state 6
    programme                      shift and go to state 58

state 55

    (12) structure -> FOR expression TO expression BY . expression { programme }
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . expression MOD expression
    (20) expression -> . expression CMP_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . STRING
    (24) expression -> . ( expression )
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 23
    STRING          shift and go to state 22
    (               shift and go to state 20
    ADD_OP          shift and go to state 21

    expression                     shift and go to state 59

state 56

    (15) animation -> ANIMATION ( STRING , STRING . ) { programme }

    )               shift and go to state 60


state 57

    (11) condition -> IF expression { programme } .

    LOG             reduce using rule 11 (condition -> IF expression { programme } .)
    IDENTIFIER      reduce using rule 11 (condition -> IF expression { programme } .)
    FOR             reduce using rule 11 (condition -> IF expression { programme } .)
    IF              reduce using rule 11 (condition -> IF expression { programme } .)
    @               reduce using rule 11 (condition -> IF expression { programme } .)
    KEYFRAMES       reduce using rule 11 (condition -> IF expression { programme } .)
    ANIMATION       reduce using rule 11 (condition -> IF expression { programme } .)
    FRAME           reduce using rule 11 (condition -> IF expression { programme } .)
    $end            reduce using rule 11 (condition -> IF expression { programme } .)
    }               reduce using rule 11 (condition -> IF expression { programme } .)


state 58

    (16) frame -> FRAME ( expression ) { programme . }

    }               shift and go to state 61


state 59

    (12) structure -> FOR expression TO expression BY expression . { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression
    (19) expression -> expression . MOD expression
    (20) expression -> expression . CMP_OP expression

    {               shift and go to state 62
    ADD_OP          shift and go to state 33
    MUL_OP          shift and go to state 32
    MOD             shift and go to state 35
    CMP_OP          shift and go to state 34


state 60

    (15) animation -> ANIMATION ( STRING , STRING ) . { programme }

    {               shift and go to state 63


state 61

    (16) frame -> FRAME ( expression ) { programme } .

    LOG             reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    IDENTIFIER      reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    FOR             reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    IF              reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    @               reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    KEYFRAMES       reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    ANIMATION       reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    FRAME           reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    $end            reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)
    }               reduce using rule 16 (frame -> FRAME ( expression ) { programme } .)


state 62

    (12) structure -> FOR expression TO expression BY expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    condition                      shift and go to state 12
    statement                      shift and go to state 7
    css                            shift and go to state 8
    structure                      shift and go to state 6
    programme                      shift and go to state 64

state 63

    (15) animation -> ANIMATION ( STRING , STRING ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . condition
    (6) statement -> . css
    (7) statement -> . keyframes
    (8) statement -> . animation
    (9) statement -> . frame
    (10) statement -> . LOG expression
    (26) assignation -> . IDENTIFIER : expression
    (12) structure -> . FOR expression TO expression BY expression { programme }
    (11) condition -> . IF expression { programme }
    (13) css -> . @ STRING
    (14) keyframes -> . KEYFRAMES { programme }
    (15) animation -> . ANIMATION ( STRING , STRING ) { programme }
    (16) frame -> . FRAME ( expression ) { programme }

    LOG             shift and go to state 1
    IDENTIFIER      shift and go to state 14
    FOR             shift and go to state 10
    IF              shift and go to state 13
    @               shift and go to state 9
    KEYFRAMES       shift and go to state 16
    ANIMATION       shift and go to state 11
    FRAME           shift and go to state 4

    assignation                    shift and go to state 15
    frame                          shift and go to state 2
    condition                      shift and go to state 12
    keyframes                      shift and go to state 3
    animation                      shift and go to state 5
    css                            shift and go to state 8
    statement                      shift and go to state 7
    structure                      shift and go to state 6
    programme                      shift and go to state 65

state 64

    (12) structure -> FOR expression TO expression BY expression { programme . }

    }               shift and go to state 66


state 65

    (15) animation -> ANIMATION ( STRING , STRING ) { programme . }

    }               shift and go to state 67


state 66

    (12) structure -> FOR expression TO expression BY expression { programme } .

    LOG             reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    IDENTIFIER      reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    FOR             reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    IF              reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    @               reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    KEYFRAMES       reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    ANIMATION       reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    FRAME           reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    $end            reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)
    }               reduce using rule 12 (structure -> FOR expression TO expression BY expression { programme } .)


state 67

    (15) animation -> ANIMATION ( STRING , STRING ) { programme } .

    LOG             reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    IDENTIFIER      reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    FOR             reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    IF              reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    @               reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    KEYFRAMES       reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    ANIMATION       reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    FRAME           reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    }               reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)
    $end            reduce using rule 15 (animation -> ANIMATION ( STRING , STRING ) { programme } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 46 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 46 resolved as shift
WARNING: shift/reduce conflict for MOD in state 46 resolved as shift
WARNING: shift/reduce conflict for CMP_OP in state 46 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 47 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 47 resolved as shift
WARNING: shift/reduce conflict for MOD in state 47 resolved as shift
WARNING: shift/reduce conflict for CMP_OP in state 47 resolved as shift
